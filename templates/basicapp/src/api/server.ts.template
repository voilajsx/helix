/**
 * FBCA Backend API Server with AppKit integration
 * @module {{projectName}}/server
 * @file {{projectName}}/src/api/server.ts
 *
 * @llm-rule WHEN: Creating backend APIs with Feature-Based Component Architecture
 * @llm-rule AVOID: Using without AppKit modules - breaks structured logging and error handling
 * @llm-rule NOTE: Auto-discovers features in features/ directory using naming convention
 */

import 'dotenv/config';
import express from 'express';
import cors from 'cors';
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';
import { loggerClass } from '@voilajsx/appkit/logger';
import { errorClass } from '@voilajsx/appkit/error';
import { configClass } from '@voilajsx/appkit/config';
import { createApiRouter } from './lib/api-router.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Initialize AppKit modules following the pattern
const logger = loggerClass.get('server');
const error = errorClass.get();
const config = configClass.get();

/**
 * Check if frontend build exists
 */
function checkFrontendExists(distPath: string): boolean {
  try {
    const indexPath = path.join(distPath, 'index.html');
    return fs.existsSync(indexPath);
  } catch {
    return false;
  }
}

const app = express();
const PORT = config.get('server.port', process.env.PORT || 3000);

// Middleware (following AppKit recommended order)
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Request logging middleware
app.use((req, _res, next) => {
  logger.info('Incoming request', {
    method: req.method,
    url: req.url,
    userAgent: req.get('User-Agent'),
    ip: req.ip
  });
  next();
});

// Frontend key protection for API routes (excluding /api root and /health)
app.use('/api', (req, res, next) => {
  // Skip for specific endpoints
  if (req.path === '/' || req.path === '') {
    logger.info('🔓 Frontend key check skipped for /api root');
    return next();
  }

  // Skip in development environment
  if (process.env.NODE_ENV === 'development') {
    logger.info('🔓 Frontend key check skipped (development mode)');
    return next();
  }

  const frontendKey = req.headers['x-frontend-key'] as string;
  const expectedKey = process.env.VOILA_FRONTEND_KEY;

  // Warn if no key is configured in production
  if (!expectedKey) {
    logger.warn('⚠️ VOILA_FRONTEND_KEY not configured in production environment');
    return next(); // Fail gracefully
  }

  // Check if frontend key is provided and matches
  if (!frontendKey) {
    logger.warn('❌ Frontend key missing in request headers', { url: req.url });
    return res.status(403).json({
      error: 'Frontend access key required',
      message: 'API access requires valid frontend key in X-Frontend-Key header'
    });
  }

  if (frontendKey !== expectedKey) {
    logger.warn('❌ Invalid frontend key provided', {
      url: req.url,
      providedKey: frontendKey.substring(0, 8) + '...'
    });
    return res.status(403).json({
      error: 'Invalid frontend access key',
      message: 'The provided frontend key is not valid'
    });
  }

  logger.info('✅ Frontend key validated successfully', { url: req.url });
  next();
});

// Health check with AppKit integration
app.get('/health', error.asyncRoute(async (_req, res) => {
  logger.info('Health check requested');

  const healthData = {
    status: 'ok',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    environment: config.get('app.environment', 'development')
  };

  res.json(healthData);
}));

// Initialize server with async setup
async function startServer() {
  try {
    logger.info('Initializing server...');

    // API routes with auto-discovery
    app.use('/api', await createApiRouter());

    // Check if frontend build exists and we're not in API-only dev mode
    const distPath = path.join(__dirname, '../../dist');
    const frontendExists = checkFrontendExists(distPath);
    const isApiOnlyMode = process.env.NODE_ENV !== 'production' && process.env.API_ONLY === 'true';

    logger.info('Frontend check:', { distPath, frontendExists, isApiOnlyMode });

    if (frontendExists && !isApiOnlyMode) {
      // Serve static files from dist directory (production frontend)
      logger.info('🌐 Serving frontend from dist directory');
      app.use(express.static(distPath));

      // SPA fallback - serve index.html for all non-API routes
      app.get('*', (req, res) => {
        const indexPath = path.join(distPath, 'index.html');
        logger.info('Serving SPA route', { path: req.path });
        res.sendFile(indexPath, (err) => {
          if (err) {
            logger.error('Failed to serve index.html', { error: err });
            res.status(404).json({
              error: 'Frontend not found',
              message: 'Frontend files exist but failed to serve'
            });
          }
        });
      });
    } else {
      // Fallback to /api route when no frontend
      logger.info('🔧 No frontend found, redirecting root to /api');
      app.get('/', (_req, res) => {
        logger.info('Root route requested, redirecting to /api');
        res.redirect('/api');
      });
    }

    // AppKit error handling middleware (ALWAYS LAST)
    app.use(error.handleErrors());

    app.listen(PORT, () => {
      if (frontendExists) {
        logger.info(`🚀 Full-stack server running on http://localhost:${PORT}`);
        logger.info(`🌐 Frontend: http://localhost:${PORT}`);
      } else {
        logger.info(`🔧 API-only server running on http://localhost:${PORT}`);
        logger.info(`🌐 Root: http://localhost:${PORT} → redirects to /api`);
      }
      logger.info(`📚 API routes: http://localhost:${PORT}/api`);
      logger.info(`💊 Health check: http://localhost:${PORT}/health`);
      logger.info('Server initialization completed successfully');
    });

  } catch (err: any) {
    logger.error('Failed to start server', { error: err });
    logger.error('❌ Server startup failed:', { error: err.message });
    process.exit(1);
  }
}

startServer();